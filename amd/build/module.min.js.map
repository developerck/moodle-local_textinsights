{"version":3,"file":"module.min.js","sources":["../src/module.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module initialization\n *\n * @module     local_textinsights/module\n * @copyright  2025 DeveloperCK <developerck@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport {call as fetchMany} from 'core/ajax';\nimport Notification from 'core/notification';\n\n/**\n * Initialize the module\n *\n * @param {number} courseId The course ID\n * @param {Object} capabilities The user capabilities\n */\nexport const init = (courseId, capabilities) => {\n    // Create context menu element\n    const menuHtml = `\n        <div class=\"textinsights-menu\" style=\"display:none;\">\n            <div class=\"list-group\">\n                ${capabilities.explain ?\n                    `<a href=\"#\" class=\"list-group-item list-group-item-action\" data-action=\"explain\">\n                        <i class=\"fa fa-info-circle\"></i> ${M.util.get_string('explain', 'local_textinsights')}\n                    </a>` : ''}\n                ${capabilities.summarize ?\n                    `<a href=\"#\" class=\"list-group-item list-group-item-action\" data-action=\"summarize\">\n                        <i class=\"fa fa-compress\"></i> ${M.util.get_string('summarize', 'local_textinsights')}\n                    </a>` : ''}\n                ${capabilities.validate ?\n                    `<a href=\"#\" class=\"list-group-item list-group-item-action\" data-action=\"validate\">\n                        <i class=\"fa fa-check-circle\"></i> ${M.util.get_string('validate', 'local_textinsights')}\n                    </a>` : ''}\n            </div>\n            <div class=\"ai-icon-bottom-right\">\n        <div class=\"ai-icon-bottom-right\"> ${M.util.get_string('poweredby', 'local_textinsights')}\n        <i class=\"fa fa-robot fa-spin\"></i>\n        </div>\n        </div>\n        </div>`;\n\n    // Create result tooltip element\n    const tooltipHtml = `\n        <div class=\"textinsights-tooltip\" style=\"display:none;\">\n            <div class=\"textinsights-tooltip-content\"></div>\n            <button type=\"button\" class=\"btn btn-link btn-sm close-tooltip\">\n                <i class=\"fa fa-times\"></i>\n            </button>\n        </div>`;\n\n    const $menu = $(menuHtml).appendTo('body');\n    const $tooltip = $(tooltipHtml).appendTo('body');\n    // Add styles\n    $('head').append(`\n        <style>\n            .textinsights-tooltip {\n                position: absolute;\n                max-width: 400px;\n                background: #fff;\n                border: 1px solid #ddd;\n                border-radius: 4px;\n                padding: 15px;\n                box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n                z-index: 1050;\n            }\n            .textinsights-tooltip .close-tooltip {\n                position: absolute;\n                top: 5px;\n                right: 5px;\n                padding: 0;\n                width: 24px;\n                height: 24px;\n                line-height: 24px;\n                text-align: center;\n            }\n            .textinsights-menu {\n                position: absolute;\n                background: #fff;\n                border: 1px solid #ddd;\n                border-radius: 4px;\n                box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n                z-index: 1000;\n            }\n            .textinsights-loading {\n                text-align: center;\n                padding: 10px;\n            }\n            .ai-icon-bottom-right {\n            position: relative;\n            left: 5px;   \n            color: #007bff;  \n            opacity: 0.7;    \n        }\n        </style>\n    `);\n\n    // Function to get selected text and its container\n    const getSelectedText = () => {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {return null;}\n\n        const range = selection.getRangeAt(0);\n        const text = range.toString().trim();\n        if (!text) {return null;}\n\n        // Expand selection to include whole words\n        const startNode = range.startContainer;\n        const endNode = range.endContainer;\n        if (startNode.nodeType === Node.TEXT_NODE) {\n            const startOffset = range.startOffset;\n            const text = startNode.textContent;\n            let start = startOffset;\n            while (start > 0 && /\\S/.test(text[start - 1])) {\n                start--;\n            }\n            range.setStart(startNode, start);\n        }\n        if (endNode.nodeType === Node.TEXT_NODE) {\n            const endOffset = range.endOffset;\n            const text = endNode.textContent;\n            let end = endOffset;\n            while (end < text.length && /\\S/.test(text[end])) {\n                end++;\n            }\n            range.setEnd(endNode, end);\n        }\n\n        return {\n            text: range.toString().trim(),\n            range: range\n        };\n    };\n\n    // Process text through GPT\n    const processText = async (text, action) => {\n        try {\n            const result = await fetchMany([{\n                methodname: 'local_textinsights_process_text',\n                args: {\n                    text: text,\n                    action: action,\n                    courseid: courseId\n                }\n            }])[0];\n            return result.result;\n        } catch (error) {\n            Notification.exception(error);\n            return M.util.get_string('error', 'local_textinsights');\n        }\n    };\n\n    // Position tooltip near selection\n    const positionTooltip = (range) => {\n        const rect = range.getBoundingClientRect();\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n        $tooltip.css({\n            top: rect.bottom + scrollTop + 5 + 'px',\n            left: rect.left + scrollLeft + 'px'\n        });\n    };\n\n    // Handle context menu positioning and display\n    $(document).on('mouseup', '.course-content, .course-content *', async () => {\n        const selection = getSelectedText();\n        if (!selection || !selection.text) {\n            $menu.hide();\n            return;\n        }\n\n        // Position menu near selection\n        const rect = selection.range.getBoundingClientRect();\n        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n        $menu.css({\n            top: rect.bottom + scrollTop + 5 + 'px',\n            left: rect.left + scrollLeft + 'px'\n        }).show();\n\n        // Store selection data\n        $menu.data('selection', selection);\n    });\n\n    // Handle menu item clicks\n    $menu.on('click', '[data-action]', async function(e) {\n        e.preventDefault();\n        const action = $(this).data('action');\n        const selection = $menu.data('selection');\n        if (!selection) {return;}\n\n        // Hide menu\n        $menu.hide();\n\n        // Show loading tooltip\n        $tooltip.find('.textinsights-tooltip-content')\n            .html('<div class=\"textinsights-loading\"><i class=\"fa fa-loading fa-spin\"></i> ' +\n                  M.util.get_string('loading', 'local_textinsights') + '</div>');\n        $tooltip.show();\n        positionTooltip(selection.range);\n\n        // Process text\n        const result = await processText(selection.text, action);\n\n        // Update tooltip with result\n        $tooltip.find('.textinsights-tooltip-content').html(result);\n        positionTooltip(selection.range);\n    });\n\n    // Handle tooltip close button\n    $tooltip.on('click', '.close-tooltip', () => {\n        $tooltip.hide();\n    });\n\n    // Hide menu and tooltip on click outside\n    $(document).on('mousedown', (e) => {\n        if (!$(e.target).closest('.textinsights-menu, .textinsights-tooltip').length) {\n            $menu.hide();\n            $tooltip.hide();\n        }\n    });\n\n    // Handle window resize and scroll\n    $(window).on('resize scroll', () => {\n        if ($tooltip.is(':visible')) {\n            const selection = $menu.data('selection');\n            if (selection) {\n                positionTooltip(selection.range);\n            }\n        }\n    });\n};\n"],"names":["courseId","capabilities","menuHtml","explain","M","util","get_string","summarize","validate","$menu","appendTo","$tooltip","append","positionTooltip","range","rect","getBoundingClientRect","scrollTop","window","pageYOffset","document","documentElement","scrollLeft","pageXOffset","css","top","bottom","left","on","async","selection","getSelection","rangeCount","getRangeAt","toString","trim","startNode","startContainer","endNode","endContainer","nodeType","Node","TEXT_NODE","startOffset","text","textContent","start","test","setStart","endOffset","end","length","setEnd","getSelectedText","hide","show","data","e","preventDefault","action","this","find","html","result","methodname","args","courseid","error","exception","processText","target","closest","is"],"mappings":"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"}